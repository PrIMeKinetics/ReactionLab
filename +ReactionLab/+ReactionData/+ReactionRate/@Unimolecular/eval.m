function [y,u] = eval(k,T,kUnits,P,unitsP)%[y,units] = eval(UnimolecularObj,T,kUnits,P,unitsP)% evaluates unimolecular rate coefficient at given T and P%%y = eval(k,T,kUnits,P,unitsP)    unitsP = 'atm|torr|bar'%y = eval(k,T,''    ,P,unitsP)    in cm3/mol_s%y = eval(k,T,kUnits,0)           low-P rate coef%y = eval(k,T,kUnits,inf)        high-P rate coef% Copyright 1999-2010 Michael Frenklach% $Revision: 1.1 $% Last modified: November 20, 2010if ischar(P), P = str2num(P); end[k_inf,u] = k.High.eval(T,kUnits);if P == 0       % low-pressure limit   [y,u] = k.Low.eval(T,kUnits);elseif isinf(P) % high-pressure limit   y = k_inf;else   k_lowP = k.Low.find('Collider','s00000001');   k_0 = k_lowP.eval(T) .* totalConc;   Pr = k_0 ./ k_inf;   switch lower(k.Falloff.Type)      case 'lindemann'         y = k_inf .* Pr ./ (1 + Pr);      case {'troe' 'sri'}         y = k_inf .* Pr ./ (1 + Pr) .* ...         k.Falloff.eval(T,Pr,k.Falloff.Data);      otherwise         error(['undefined falloff type: ' k.Falloff.Type])   endend      function c = totalConc   % return  c = p/RT      switch lower(unitsP)         case 'atm'            p = P;         case 'torr'            p = P / 760.;  % convert to atm         case 'bar'            p = P / 1.01325;         otherwise            error(['Incorrect pressure units: ', kUnits])      end      c = p./(ReactionLab.PhysConst.univR('atm_cm3/mol_K') .* T);   endend