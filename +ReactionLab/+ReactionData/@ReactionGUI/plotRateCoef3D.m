function plotRateCoef3D(rxnGUI,r,T,kF,eqK,P)% plotRateCoef3D(rxnGUIobj,ReactionObj,T,kF,eqK,P)% 3D plot of rate coefficient vs T and P%%  log10(k) vs 1/T and log10(p):%   plot(r,kUnits,Tarray,[Pmin Pmax],unitsP)%   plot(r,kUnits,Tarray, Parray,    unitsP)% Copyright 2005-2010 Michael Frenklach% $Revision: 1.1 $% Last modified: November 20, 2010Hfig = figure(...   'NumberTitle', 'off',...   'Name', r.Eq,...   'Tag', 'plot3d',...   'Resize','on');Hmenu = uimenu(Hfig,'Label','&Plot');Hp  = uimenu(Hmenu,'Label','k vs P',...   'CallBack',{@LOCAL_forward Hfig '2p' r varargin{:}});Ht  = uimenu(Hmenu,'Label','k vs T',...   'CallBack',{@LOCAL_forward Hfig '2t' r varargin{:}});Hpt = uimenu(Hmenu,'Label','k vs T,P',...   'CallBack',{@LOCAL_forward Hfig '3d' r varargin{:}});Hrev = uimenu(Hmenu,'Label','reverse',...   'Separator','on',...   'CallBack',{@LOCAL_direction Hfig [Hp Ht Hpt] r });f = get(Hpt,'CallBack');feval(f{1},Hpt,[],f{2:end});returnfunction LOCAL_direction(h,d,Hfig,Hmenu,r)% changes reaction direction   current_direction = get(h,'Label');   if strcmp(current_direction,'reverse')      set(Hfig,'Name',get(-r,'eq'));      set(h,'Label','forward');      for i = 1:3         label = get(Hmenu(i),'Label');         label = [label(1) '_rev' label(2:end)];         set(Hmenu(i),'Label',label);         f = get(Hmenu(i),'CallBack');         f(1) = {@LOCAL_reverse};         set(Hmenu(i),'CallBack',f)      end   else      set(Hfig,'Name',get(r,'eq'));      set(h,'Label','reverse');      for i = 1:3         label = get(Hmenu(i),'Label');         label(2:5) = [];         set(Hmenu(i),'Label',label);         f = get(Hmenu(i),'CallBack');         f(1) = {@LOCAL_forward};         set(Hmenu(i),'CallBack',f)      end   end   Hcur = getappdata(Hfig,'currentPlot');   g = get(Hcur,'CallBack');   feval(g{1},Hcur,[],g{2:end});returnfunction LOCAL_forward(h,d,Hfig,plotType,r,varargin)% callback function   setappdata(Hfig,'currentPlot',h);  % remember the last call   f = str2func(['plot' plotType]);   k = get(r,'k_forward');   varargin(1) = varargin{1}(2,1);    % extract k units   feval(f,k,Hfig,varargin{:});returnfunction LOCAL_reverse(h,d,Hfig,plotType,r,varargin)% callback function   setappdata(Hfig,'currentPlot',h);   f = str2func(['LOCAL_plot' plotType]);   feval(f,r,Hfig,varargin{:});returnfunction LOCAL_plot2p(r,Hfig,varargin)%PLOT2P(ratecoefObj,Hfig,kUnits,T,P,unitsP,{spe, col_eff})% plot rate coefficient vs P at array of T's for the reverse direction% for input arguments see ratecoef/plot3d% Copyright (c) 2005 Michael Frenklach% $Revision: February 6, 2005 $   P = varargin{3};   if length(P) == 2      NgridP = 30;      Pvar = log10(P);      varPgrid = linspace(Pvar(1),Pvar(end),NgridP);      Pgrid = 10.^varPgrid;      varargin{3} = Pgrid;   else      Pgrid = P; % use the P points given if more than 2      varPgrid = log10(P);   end   T = varargin{2};   Tgrid = T;   revTgrid = 1./T;   Y = zeros(length(T),length(Pgrid));   leg = {};   for i = 1:length(T)      Ti = T(i);      varargin{2} = Ti;      [ki,eqK,uKeq,kF,ukF] = evalrevk(r,varargin{:});      ku = '';      Y(i,:) = ki;      leg = [ leg; { [num2str(Ti) ' K'] }];   end   if isempty(Hfig) figure;   else             set(Hfig,'Visible','on');  end   if length(P) == 2      semilogy(varPgrid,Y)   else      semilogy(varPgrid,Y,'-o')   end   legend(leg)   xlabel(['log10(P)   '  varargin{4}])   ylabel(['log10(k) '   ku])   v = axis;   v(1) = min(varPgrid);   v(2) = max(varPgrid);   axis(v)returnfunction LOCAL_plot2t(r,Hfig,varargin)%PLOT2T(ratecoefObj,Hfig,kUnits,T,P,unitsP,{spe, col_eff})% plot rate coefficient vs T at array of P's for the reverse direction% for input arguments see ratecoef/plot3d% Copyright (c) 2005 Michael Frenklach% $Revision: February 6, 2005 $   T = varargin{2};   if length(T) == 2      NgridT = 30;      Tvar = 1./T;      revTgrid = linspace(Tvar(1),Tvar(end),NgridT);      Tgrid = 1./revTgrid;      varargin{2} = Tgrid;   else      Tgrid = T; % use the T points given if more than 2      revTgrid = 1./T;   end   P = varargin{3};   Y = zeros(length(P),length(Tgrid));   leg = {};   for i = 1:length(P)      Pi = P(i);      varargin{3} = Pi;      [ki,eqK,uKeq,kF,ukF] = evalrevk(r,varargin{:});      ku = '';      Y(i,:) = ki;      leg = [ leg; { [num2str(Pi) ' ' varargin{4}] }];   end   if isempty(Hfig) figure;   else             set(Hfig,'Visible','on');  end   if length(T) == 2      semilogy(revTgrid,Y)   else      semilogy(revTgrid,Y,'-o')   end   legend(leg)   xlabel('1/T   (K)')   ylabel(['log10(k)   ' ku])   v = axis;   v(1) = min(revTgrid);   v(2) = max(revTgrid);   axis(v)returnfunction LOCAL_plot3d(r,Haxes,varargin)%PLOT3DR(ratecoefObj,Haxes,kUnits,T,P,unitsP,{spe, col_eff})% 3D plot of rate coefficient vs T and P for the reverse direction% for input arguments see ratecoef/plot3d% Copyright (c) 2005 Michael Frenklach% $Revision: February 6, 2005 $   T = varargin{2};   if length(T) == 2      NgridT = 30;      Tvar = 1./T;      revTgrid = linspace(Tvar(1),Tvar(end),NgridT);      Tgrid = 1./revTgrid;      varargin{2} = Tgrid;   else      Tgrid = T; % use the T points given if more than 2      revTgrid = 1./T;   end   P = varargin{3};   if length(P) == 2      NgridP = 30;      Pvar = log10(P);      varPgrid = linspace(Pvar(1),Pvar(end),NgridP);      Pgrid = 10.^varPgrid;   else      Pgrid = P; % use the P points given if more than 2      varPgrid = log10(P);   end   [Tmesh,Pmesh] = meshgrid(revTgrid,varPgrid);   Z = zeros(size(Pmesh));   for i = 1:length(varPgrid)      Pi = Pgrid(i);      varargin{3} = Pi;      [ki,eqK,uKeq,kF,ukF] = evalrevk(r,varargin{:});      ku = '';      Z(i,:) = ki;   end   if isempty(Haxes)      figure;      surfc(Tmesh,Pmesh,log10(Z))  %  mesh | surf   elseif strcmp(get(Haxes,'type'),'axes')      surfc(Haxes,Tmesh,Pmesh,log10(Z))   else      set(Haxes,'Visible','on')      surfc(Tmesh,Pmesh,log10(Z))  %  mesh | surf   end   colormap hsv   xlabel('1/T   (K)')   ylabel(['log10(P) '   varargin{4}])   %zlabel(['log10(k) '   ku])   zlabel('log10(k)')return